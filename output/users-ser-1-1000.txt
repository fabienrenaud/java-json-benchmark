# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb

# Run progress: 0.00% complete, ETA 00:13:12
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301184183709345 as seed for Random
831.585 ops/s
Iteration   1: 827.469 ops/s

# Run progress: 1.52% complete, ETA 00:14:38
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301197891029871 as seed for Random
876.503 ops/s
Iteration   1: 992.124 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb":
  909.796 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson

# Run progress: 3.03% complete, ETA 00:14:30
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301211413900123 as seed for Random
592.243 ops/s
Iteration   1: 738.225 ops/s

# Run progress: 4.55% complete, ETA 00:14:16
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301224989678953 as seed for Random
623.679 ops/s
Iteration   1: 712.452 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson":
  725.338 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.boon

# Run progress: 6.06% complete, ETA 00:14:01
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301238497239048 as seed for Random
<failure>

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.ExceptionInInitializerError
	at org.boon.core.reflection.Reflection.<clinit>(Reflection.java:122)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassCastException: class [B cannot be cast to class [C ([B and [C are in module java.base of loader 'bootstrap')
	at org.boon.core.reflection.FastStringUtils$StringImplementation$1.toCharArray(FastStringUtils.java:92)
	at org.boon.core.reflection.FastStringUtils.toCharArray(FastStringUtils.java:175)
	at org.boon.Str.underBarCase(Str.java:538)
	at org.boon.core.Sys.sysProp(Sys.java:341)
	at org.boon.core.timer.TimeKeeperBasic.<init>(TimeKeeperBasic.java:52)
	at org.boon.core.Sys.<clinit>(Sys.java:182)
	... 19 more

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_thrpt_jmhStub(Serialization_boon_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)



# Run progress: 7.58% complete, ETA 00:11:19
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301239936441799 as seed for Random
<failure>

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.ExceptionInInitializerError
	at org.boon.core.reflection.Reflection.<clinit>(Reflection.java:122)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassCastException: class [B cannot be cast to class [C ([B and [C are in module java.base of loader 'bootstrap')
	at org.boon.core.reflection.FastStringUtils$StringImplementation$1.toCharArray(FastStringUtils.java:92)
	at org.boon.core.reflection.FastStringUtils.toCharArray(FastStringUtils.java:175)
	at org.boon.Str.underBarCase(Str.java:538)
	at org.boon.core.Sys.sysProp(Sys.java:341)
	at org.boon.core.timer.TimeKeeperBasic.<init>(TimeKeeperBasic.java:52)
	at org.boon.core.Sys.<clinit>(Sys.java:182)
	... 19 more

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_thrpt_jmhStub(Serialization_boon_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson

# Run progress: 9.09% complete, ETA 00:09:32
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301241385484736 as seed for Random
1069.947 ops/s
Iteration   1: 1172.104 ops/s

# Run progress: 10.61% complete, ETA 00:09:56
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301255092638299 as seed for Random
1142.742 ops/s
Iteration   1: 1251.413 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson":
  1211.758 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection

# Run progress: 12.12% complete, ETA 00:10:12
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301268767566234 as seed for Random
875.177 ops/s
Iteration   1: 849.573 ops/s

# Run progress: 13.64% complete, ETA 00:10:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301282419406293 as seed for Random
868.797 ops/s
Iteration   1: 909.350 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection":
  879.461 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.fastjson

# Run progress: 15.15% complete, ETA 00:10:25
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301295955482407 as seed for Random
271.296 ops/s
Iteration   1: 298.903 ops/s

# Run progress: 16.67% complete, ETA 00:10:27
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301309642460967 as seed for Random
278.050 ops/s
Iteration   1: 273.585 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.fastjson":
  286.244 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.flexjson

# Run progress: 18.18% complete, ETA 00:10:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301323259177157 as seed for Random
43.083 ops/s
Iteration   1: 33.322 ops/s

# Run progress: 19.70% complete, ETA 00:10:28
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301338470453959 as seed for Random
39.504 ops/s
Iteration   1: 36.314 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.flexjson":
  34.818 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.genson

# Run progress: 21.21% complete, ETA 00:10:28
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301353479407427 as seed for Random
408.506 ops/s
Iteration   1: 435.844 ops/s

# Run progress: 22.73% complete, ETA 00:10:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301367170300904 as seed for Random
512.897 ops/s
Iteration   1: 494.776 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.genson":
  465.310 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.gson

# Run progress: 24.24% complete, ETA 00:10:14
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301380815535337 as seed for Random
302.031 ops/s
Iteration   1: 337.703 ops/s

# Run progress: 25.76% complete, ETA 00:10:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301394379564386 as seed for Random
312.524 ops/s
Iteration   1: 320.302 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.gson":
  329.002 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson

# Run progress: 27.27% complete, ETA 00:09:57
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301408120242253 as seed for Random
712.549 ops/s
Iteration   1: 674.509 ops/s

# Run progress: 28.79% complete, ETA 00:09:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301421698069576 as seed for Random
643.657 ops/s
Iteration   1: 679.899 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson":
  677.204 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner

# Run progress: 30.30% complete, ETA 00:09:37
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301435440385751 as seed for Random
714.441 ops/s
Iteration   1: 736.283 ops/s

# Run progress: 31.82% complete, ETA 00:09:27
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301449192902852 as seed for Random
707.500 ops/s
Iteration   1: 759.821 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner":
  748.052 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird

# Run progress: 33.33% complete, ETA 00:09:17
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301462780447673 as seed for Random
585.908 ops/s
Iteration   1: 668.922 ops/s

# Run progress: 34.85% complete, ETA 00:09:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301476316685461 as seed for Random
693.989 ops/s
Iteration   1: 750.684 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird":
  709.803 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jodd

# Run progress: 36.36% complete, ETA 00:08:54
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301489854084738 as seed for Random
114.060 ops/s
Iteration   1: 120.384 ops/s

# Run progress: 37.88% complete, ETA 00:08:44
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301503817682799 as seed for Random
112.943 ops/s
Iteration   1: 122.455 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jodd":
  121.420 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.johnzon

# Run progress: 39.39% complete, ETA 00:08:33
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301517730778167 as seed for Random
251.265 ops/s
Iteration   1: 284.830 ops/s

# Run progress: 40.91% complete, ETA 00:08:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301531902548740 as seed for Random
262.399 ops/s
Iteration   1: 267.615 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.johnzon":
  276.222 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jsoniter

# Run progress: 42.42% complete, ETA 00:08:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301546005380365 as seed for Random
<failure>

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at javassist.util.proxy.SecurityActions.setAccessible(SecurityActions.java:159)
	at javassist.util.proxy.DefineClassHelper$JavaOther.defineClass(DefineClassHelper.java:213)
	at javassist.util.proxy.DefineClassHelper$Java11.defineClass(DefineClassHelper.java:52)
	at javassist.util.proxy.DefineClassHelper.toClass(DefineClassHelper.java:260)
	at javassist.ClassPool.toClass(ClassPool.java:1240)
	at javassist.ClassPool.toClass(ClassPool.java:1098)
	at javassist.ClassPool.toClass(ClassPool.java:1056)
	at javassist.CtClass.toClass(CtClass.java:1298)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:29)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_thrpt_jmhStub(Serialization_jsoniter_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 37 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more



# Run progress: 43.94% complete, ETA 00:07:43
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301547657585869 as seed for Random
<failure>

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at javassist.util.proxy.SecurityActions.setAccessible(SecurityActions.java:159)
	at javassist.util.proxy.DefineClassHelper$JavaOther.defineClass(DefineClassHelper.java:213)
	at javassist.util.proxy.DefineClassHelper$Java11.defineClass(DefineClassHelper.java:52)
	at javassist.util.proxy.DefineClassHelper.toClass(DefineClassHelper.java:260)
	at javassist.ClassPool.toClass(ClassPool.java:1240)
	at javassist.ClassPool.toClass(ClassPool.java:1098)
	at javassist.ClassPool.toClass(ClassPool.java:1056)
	at javassist.CtClass.toClass(CtClass.java:1298)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:29)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_thrpt_jmhStub(Serialization_jsoniter_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 37 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

java.lang.NullPointerException: Cannot invoke "com.jsoniter.spi.Encoder.encode(Object, com.jsoniter.output.JsonStream)" because "encoder" is null
	at com.jsoniter.output.Codegen$1.encode(Codegen.java:139)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NullPointerException: Cannot invoke "com.jsoniter.spi.Encoder.encode(Object, com.jsoniter.output.JsonStream)" because "encoder" is null
	at com.jsoniter.output.Codegen$1.encode(Codegen.java:139)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jsonsmart

# Run progress: 45.45% complete, ETA 00:07:19
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301549935571531 as seed for Random
298.342 ops/s
Iteration   1: 314.959 ops/s

# Run progress: 46.97% complete, ETA 00:07:08
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301563572665277 as seed for Random
333.018 ops/s
Iteration   1: 370.007 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jsonsmart":
  342.483 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.logansquare

# Run progress: 48.48% complete, ETA 00:06:57
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301577100674568 as seed for Random
831.314 ops/s
Iteration   1: 910.820 ops/s

# Run progress: 50.00% complete, ETA 00:06:46
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301590536871028 as seed for Random
801.215 ops/s
Iteration   1: 949.311 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.logansquare":
  930.066 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.moshi

# Run progress: 51.52% complete, ETA 00:06:35
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301604040846398 as seed for Random
352.010 ops/s
Iteration   1: 360.281 ops/s

# Run progress: 53.03% complete, ETA 00:06:23
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301617603161413 as seed for Random
342.163 ops/s
Iteration   1: 348.718 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.moshi":
  354.500 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.yasson

# Run progress: 54.55% complete, ETA 00:06:12
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301631154439899 as seed for Random
252.904 ops/s
Iteration   1: 265.355 ops/s

# Run progress: 56.06% complete, ETA 00:06:01
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301645089629861 as seed for Random
221.628 ops/s
Iteration   1: 279.031 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.yasson":
  272.193 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.genson

# Run progress: 57.58% complete, ETA 00:05:49
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301658844151861 as seed for Random
400.464 ops/s
Iteration   1: 443.448 ops/s

# Run progress: 59.09% complete, ETA 00:05:38
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301672491899206 as seed for Random
364.768 ops/s
Iteration   1: 483.011 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.genson":
  463.230 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.gson

# Run progress: 60.61% complete, ETA 00:05:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301686257023843 as seed for Random
141.758 ops/s
Iteration   1: 165.342 ops/s

# Run progress: 62.12% complete, ETA 00:05:14
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301700098980814 as seed for Random
130.975 ops/s
Iteration   1: 160.355 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.gson":
  162.848 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jackson

# Run progress: 63.64% complete, ETA 00:05:02
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301713938396476 as seed for Random
860.570 ops/s
Iteration   1: 886.305 ops/s

# Run progress: 65.15% complete, ETA 00:04:50
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301727439600586 as seed for Random
852.476 ops/s
Iteration   1: 859.356 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jackson":
  872.831 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.javaxjson

# Run progress: 66.67% complete, ETA 00:04:38
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301741058205528 as seed for Random
663.353 ops/s
Iteration   1: 699.244 ops/s

# Run progress: 68.18% complete, ETA 00:04:26
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301754660255276 as seed for Random
643.756 ops/s
Iteration   1: 895.039 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.javaxjson":
  797.142 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jsonio

# Run progress: 69.70% complete, ETA 00:04:13
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301767967336241 as seed for Random
135.071 ops/s
Iteration   1: 143.177 ops/s

# Run progress: 71.21% complete, ETA 00:04:01
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301781465174630 as seed for Random
132.281 ops/s
Iteration   1: 129.930 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jsonio":
  136.553 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jsonsimple

# Run progress: 72.73% complete, ETA 00:03:49
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301795151415245 as seed for Random
89.198 ops/s
Iteration   1: 96.127 ops/s

# Run progress: 74.24% complete, ETA 00:03:36
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301808954422383 as seed for Random
91.749 ops/s
Iteration   1: 92.032 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jsonsimple":
  94.080 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.minimaljson

# Run progress: 75.76% complete, ETA 00:03:24
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301822754541480 as seed for Random
351.481 ops/s
Iteration   1: 420.432 ops/s

# Run progress: 77.27% complete, ETA 00:03:11
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301836264848501 as seed for Random
374.495 ops/s
Iteration   1: 441.894 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.minimaljson":
  431.163 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.mjson

# Run progress: 78.79% complete, ETA 00:02:59
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301849682333488 as seed for Random
105.245 ops/s
Iteration   1: 121.631 ops/s

# Run progress: 80.30% complete, ETA 00:02:46
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301863340526242 as seed for Random
115.395 ops/s
Iteration   1: 119.138 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.mjson":
  120.385 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.moshi

# Run progress: 81.82% complete, ETA 00:02:34
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301877325640649 as seed for Random
444.476 ops/s
Iteration   1: 473.533 ops/s

# Run progress: 83.33% complete, ETA 00:02:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301890660521723 as seed for Random
486.041 ops/s
Iteration   1: 513.414 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.moshi":
  493.473 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.nanojson

# Run progress: 84.85% complete, ETA 00:02:08
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301903881556870 as seed for Random
638.607 ops/s
Iteration   1: 720.942 ops/s

# Run progress: 86.36% complete, ETA 00:01:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301917093885293 as seed for Random
634.765 ops/s
Iteration   1: 697.784 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.nanojson":
  709.363 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.orgjson

# Run progress: 87.88% complete, ETA 00:01:42
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301930275467746 as seed for Random
150.869 ops/s
Iteration   1: 171.022 ops/s

# Run progress: 89.39% complete, ETA 00:01:30
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301943826455828 as seed for Random
142.638 ops/s
Iteration   1: 170.312 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.orgjson":
  170.667 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.purejson

# Run progress: 90.91% complete, ETA 00:01:17
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301957286623625 as seed for Random
6.395 ops/s
Iteration   1: 6.372 ops/s

# Run progress: 92.42% complete, ETA 00:01:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=301979016774491 as seed for Random
6.316 ops/s
Iteration   1: 6.446 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.purejson":
  6.409 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.tapestry

# Run progress: 93.94% complete, ETA 00:00:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=302000875990129 as seed for Random
84.054 ops/s
Iteration   1: 88.700 ops/s

# Run progress: 95.45% complete, ETA 00:00:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=302014538075026 as seed for Random
86.096 ops/s
Iteration   1: 95.876 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.tapestry":
  92.288 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.underscore_java

# Run progress: 96.97% complete, ETA 00:00:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=302028269412899 as seed for Random
129.326 ops/s
Iteration   1: 140.039 ops/s

# Run progress: 98.48% complete, ETA 00:00:13
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=302041836953811 as seed for Random
132.312 ops/s
Iteration   1: 137.720 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.underscore_java":
  138.880 ops/s


# Run complete. Total time: 00:14:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt     Score   Error  Units
c.g.f.j.databind.Serialization.avajejsonb           thrpt    2   909.796          ops/s
c.g.f.j.databind.Serialization.avajejsonb_jackson   thrpt    2   725.338          ops/s
c.g.f.j.databind.Serialization.dsljson              thrpt    2  1211.758          ops/s
c.g.f.j.databind.Serialization.dsljson_reflection   thrpt    2   879.461          ops/s
c.g.f.j.databind.Serialization.fastjson             thrpt    2   286.244          ops/s
c.g.f.j.databind.Serialization.flexjson             thrpt    2    34.818          ops/s
c.g.f.j.databind.Serialization.genson               thrpt    2   465.310          ops/s
c.g.f.j.databind.Serialization.gson                 thrpt    2   329.002          ops/s
c.g.f.j.databind.Serialization.jackson              thrpt    2   677.204          ops/s
c.g.f.j.databind.Serialization.jackson_afterburner  thrpt    2   748.052          ops/s
c.g.f.j.databind.Serialization.jackson_blackbird    thrpt    2   709.803          ops/s
c.g.f.j.databind.Serialization.jodd                 thrpt    2   121.420          ops/s
c.g.f.j.databind.Serialization.johnzon              thrpt    2   276.222          ops/s
c.g.f.j.databind.Serialization.jsonsmart            thrpt    2   342.483          ops/s
c.g.f.j.databind.Serialization.logansquare          thrpt    2   930.066          ops/s
c.g.f.j.databind.Serialization.moshi                thrpt    2   354.500          ops/s
c.g.f.j.databind.Serialization.yasson               thrpt    2   272.193          ops/s
c.g.f.j.stream.Serialization.genson                 thrpt    2   463.230          ops/s
c.g.f.j.stream.Serialization.gson                   thrpt    2   162.848          ops/s
c.g.f.j.stream.Serialization.jackson                thrpt    2   872.831          ops/s
c.g.f.j.stream.Serialization.javaxjson              thrpt    2   797.142          ops/s
c.g.f.j.stream.Serialization.jsonio                 thrpt    2   136.553          ops/s
c.g.f.j.stream.Serialization.jsonsimple             thrpt    2    94.080          ops/s
c.g.f.j.stream.Serialization.minimaljson            thrpt    2   431.163          ops/s
c.g.f.j.stream.Serialization.mjson                  thrpt    2   120.385          ops/s
c.g.f.j.stream.Serialization.moshi                  thrpt    2   493.473          ops/s
c.g.f.j.stream.Serialization.nanojson               thrpt    2   709.363          ops/s
c.g.f.j.stream.Serialization.orgjson                thrpt    2   170.667          ops/s
c.g.f.j.stream.Serialization.purejson               thrpt    2     6.409          ops/s
c.g.f.j.stream.Serialization.tapestry               thrpt    2    92.288          ops/s
c.g.f.j.stream.Serialization.underscore_java        thrpt    2   138.880          ops/s
