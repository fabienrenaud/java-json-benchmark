# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb

# Run progress: 0.00% complete, ETA 00:13:12
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295287294176376 as seed for Random
1034900.489 ops/s
Iteration   1: 968466.294 ops/s

# Run progress: 1.52% complete, ETA 00:14:19
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295300572749081 as seed for Random
954779.547 ops/s
Iteration   1: 821383.507 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb":
  894924.900 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson

# Run progress: 3.03% complete, ETA 00:14:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295314051667691 as seed for Random
638826.631 ops/s
Iteration   1: 668161.248 ops/s

# Run progress: 4.55% complete, ETA 00:14:01
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295327592521594 as seed for Random
812502.283 ops/s
Iteration   1: 878192.665 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson":
  773176.956 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.boon

# Run progress: 6.06% complete, ETA 00:13:50
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295340740335313 as seed for Random
<failure>

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.ExceptionInInitializerError
	at org.boon.core.reflection.Reflection.<clinit>(Reflection.java:122)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassCastException: class [B cannot be cast to class [C ([B and [C are in module java.base of loader 'bootstrap')
	at org.boon.core.reflection.FastStringUtils$StringImplementation$1.toCharArray(FastStringUtils.java:92)
	at org.boon.core.reflection.FastStringUtils.toCharArray(FastStringUtils.java:175)
	at org.boon.Str.underBarCase(Str.java:538)
	at org.boon.core.Sys.sysProp(Sys.java:341)
	at org.boon.core.timer.TimeKeeperBasic.<init>(TimeKeeperBasic.java:52)
	at org.boon.core.Sys.<clinit>(Sys.java:182)
	... 19 more

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_thrpt_jmhStub(Serialization_boon_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)



# Run progress: 7.58% complete, ETA 00:11:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295341745081463 as seed for Random
<failure>

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.ExceptionInInitializerError
	at org.boon.core.reflection.Reflection.<clinit>(Reflection.java:122)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassCastException: class [B cannot be cast to class [C ([B and [C are in module java.base of loader 'bootstrap')
	at org.boon.core.reflection.FastStringUtils$StringImplementation$1.toCharArray(FastStringUtils.java:92)
	at org.boon.core.reflection.FastStringUtils.toCharArray(FastStringUtils.java:175)
	at org.boon.Str.underBarCase(Str.java:538)
	at org.boon.core.Sys.sysProp(Sys.java:341)
	at org.boon.core.timer.TimeKeeperBasic.<init>(TimeKeeperBasic.java:52)
	at org.boon.core.Sys.<clinit>(Sys.java:182)
	... 19 more

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_thrpt_jmhStub(Serialization_boon_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson

# Run progress: 9.09% complete, ETA 00:09:15
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295342704369908 as seed for Random
1115095.450 ops/s
Iteration   1: 1153687.134 ops/s

# Run progress: 10.61% complete, ETA 00:09:38
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295355759376150 as seed for Random
1124418.467 ops/s
Iteration   1: 1166619.359 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson":
  1160153.247 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection

# Run progress: 12.12% complete, ETA 00:09:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295368792988016 as seed for Random
852149.762 ops/s
Iteration   1: 928562.739 ops/s

# Run progress: 13.64% complete, ETA 00:09:59
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295381863154422 as seed for Random
916338.388 ops/s
Iteration   1: 891456.253 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection":
  910009.496 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.fastjson

# Run progress: 15.15% complete, ETA 00:10:03
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295395077542404 as seed for Random
734709.343 ops/s
Iteration   1: 829711.927 ops/s

# Run progress: 16.67% complete, ETA 00:10:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295408298996898 as seed for Random
787019.420 ops/s
Iteration   1: 865996.798 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.fastjson":
  847854.362 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.flexjson

# Run progress: 18.18% complete, ETA 00:10:04
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295421565943165 as seed for Random
2845.776 ops/s
Iteration   1: 1717.681 ops/s

# Run progress: 19.70% complete, ETA 00:10:01
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295434674413455 as seed for Random
2234.105 ops/s
Iteration   1: 1168.221 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.flexjson":
  1442.951 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.genson

# Run progress: 21.21% complete, ETA 00:09:56
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295447749260973 as seed for Random
485388.425 ops/s
Iteration   1: 536953.788 ops/s

# Run progress: 22.73% complete, ETA 00:09:50
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295460938772938 as seed for Random
476144.484 ops/s
Iteration   1: 526335.289 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.genson":
  531644.539 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.gson

# Run progress: 24.24% complete, ETA 00:09:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295474084180957 as seed for Random
350034.287 ops/s
Iteration   1: 384281.323 ops/s

# Run progress: 25.76% complete, ETA 00:09:36
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295487223409288 as seed for Random
296062.124 ops/s
Iteration   1: 319232.539 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.gson":
  351756.931 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson

# Run progress: 27.27% complete, ETA 00:09:28
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295500370829748 as seed for Random
762861.694 ops/s
Iteration   1: 789392.897 ops/s

# Run progress: 28.79% complete, ETA 00:09:19
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295513535431072 as seed for Random
807467.634 ops/s
Iteration   1: 850198.846 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson":
  819795.872 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner

# Run progress: 30.30% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295526700536970 as seed for Random
751303.058 ops/s
Iteration   1: 809051.348 ops/s

# Run progress: 31.82% complete, ETA 00:09:01
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295539837594288 as seed for Random
784182.079 ops/s
Iteration   1: 825448.754 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner":
  817250.051 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird

# Run progress: 33.33% complete, ETA 00:08:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295552998279909 as seed for Random
776088.365 ops/s
Iteration   1: 823540.535 ops/s

# Run progress: 34.85% complete, ETA 00:08:41
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295566304690964 as seed for Random
743827.128 ops/s
Iteration   1: 751009.947 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird":
  787275.241 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jodd

# Run progress: 36.36% complete, ETA 00:08:31
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295579440020935 as seed for Random
126436.668 ops/s
Iteration   1: 134901.051 ops/s

# Run progress: 37.88% complete, ETA 00:08:20
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295592587800964 as seed for Random
127793.965 ops/s
Iteration   1: 135013.868 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jodd":
  134957.460 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.johnzon

# Run progress: 39.39% complete, ETA 00:08:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295605694245643 as seed for Random
352475.768 ops/s
Iteration   1: 398933.713 ops/s

# Run progress: 40.91% complete, ETA 00:07:59
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295618795440263 as seed for Random
318304.331 ops/s
Iteration   1: 346113.994 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.johnzon":
  372523.854 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jsoniter

# Run progress: 42.42% complete, ETA 00:07:47
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295631965965384 as seed for Random
<failure>

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at javassist.util.proxy.SecurityActions.setAccessible(SecurityActions.java:159)
	at javassist.util.proxy.DefineClassHelper$JavaOther.defineClass(DefineClassHelper.java:213)
	at javassist.util.proxy.DefineClassHelper$Java11.defineClass(DefineClassHelper.java:52)
	at javassist.util.proxy.DefineClassHelper.toClass(DefineClassHelper.java:260)
	at javassist.ClassPool.toClass(ClassPool.java:1240)
	at javassist.ClassPool.toClass(ClassPool.java:1098)
	at javassist.ClassPool.toClass(ClassPool.java:1056)
	at javassist.CtClass.toClass(CtClass.java:1298)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:29)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_thrpt_jmhStub(Serialization_jsoniter_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 37 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more



# Run progress: 43.94% complete, ETA 00:07:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295633011150972 as seed for Random
<failure>

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @46f7f36a
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at javassist.util.proxy.SecurityActions.setAccessible(SecurityActions.java:159)
	at javassist.util.proxy.DefineClassHelper$JavaOther.defineClass(DefineClassHelper.java:213)
	at javassist.util.proxy.DefineClassHelper$Java11.defineClass(DefineClassHelper.java:52)
	at javassist.util.proxy.DefineClassHelper.toClass(DefineClassHelper.java:260)
	at javassist.ClassPool.toClass(ClassPool.java:1240)
	at javassist.ClassPool.toClass(ClassPool.java:1098)
	at javassist.ClassPool.toClass(ClassPool.java:1056)
	at javassist.CtClass.toClass(CtClass.java:1298)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:29)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_thrpt_jmhStub(Serialization_jsoniter_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 37 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more




# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jsonsmart

# Run progress: 45.45% complete, ETA 00:06:56
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295634068278022 as seed for Random
347943.392 ops/s
Iteration   1: 342330.227 ops/s

# Run progress: 46.97% complete, ETA 00:06:46
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295647217589923 as seed for Random
307003.432 ops/s
Iteration   1: 306468.845 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jsonsmart":
  324399.536 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.logansquare

# Run progress: 48.48% complete, ETA 00:06:36
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295660302745586 as seed for Random
847869.909 ops/s
Iteration   1: 952095.775 ops/s

# Run progress: 50.00% complete, ETA 00:06:26
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295673428682869 as seed for Random
790985.571 ops/s
Iteration   1: 809920.331 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.logansquare":
  881008.053 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.moshi

# Run progress: 51.52% complete, ETA 00:06:15
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295686640617857 as seed for Random
338215.912 ops/s
Iteration   1: 306932.502 ops/s

# Run progress: 53.03% complete, ETA 00:06:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295699809715134 as seed for Random
342428.764 ops/s
Iteration   1: 336850.426 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.moshi":
  321891.464 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.yasson

# Run progress: 54.55% complete, ETA 00:05:54
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295713075196957 as seed for Random
270691.376 ops/s
Iteration   1: 324112.191 ops/s

# Run progress: 56.06% complete, ETA 00:05:44
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295726280024148 as seed for Random
242899.505 ops/s
Iteration   1: 270853.451 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.yasson":
  297482.821 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.genson

# Run progress: 57.58% complete, ETA 00:05:33
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295739496540518 as seed for Random
407639.692 ops/s
Iteration   1: 429507.332 ops/s

# Run progress: 59.09% complete, ETA 00:05:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295752652677261 as seed for Random
399180.818 ops/s
Iteration   1: 428071.127 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.genson":
  428789.230 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.gson

# Run progress: 60.61% complete, ETA 00:05:11
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295765867481804 as seed for Random
236607.869 ops/s
Iteration   1: 250949.539 ops/s

# Run progress: 62.12% complete, ETA 00:04:59
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295779008500573 as seed for Random
229726.337 ops/s
Iteration   1: 233150.091 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.gson":
  242049.815 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jackson

# Run progress: 63.64% complete, ETA 00:04:48
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295792181310507 as seed for Random
867246.756 ops/s
Iteration   1: 880072.228 ops/s

# Run progress: 65.15% complete, ETA 00:04:37
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295805374190390 as seed for Random
874262.963 ops/s
Iteration   1: 927945.058 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jackson":
  904008.643 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.javaxjson

# Run progress: 66.67% complete, ETA 00:04:25
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295818534115408 as seed for Random
626022.578 ops/s
Iteration   1: 711584.706 ops/s

# Run progress: 68.18% complete, ETA 00:04:14
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295831734170382 as seed for Random
647333.523 ops/s
Iteration   1: 663686.844 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.javaxjson":
  687635.775 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jsonio

# Run progress: 69.70% complete, ETA 00:04:02
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295844949256182 as seed for Random
97794.659 ops/s
Iteration   1: 114125.454 ops/s

# Run progress: 71.21% complete, ETA 00:03:50
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295858075326494 as seed for Random
100478.797 ops/s
Iteration   1: 98414.979 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jsonio":
  106270.217 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jsonsimple

# Run progress: 72.73% complete, ETA 00:03:39
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295871160695004 as seed for Random
149343.298 ops/s
Iteration   1: 163071.375 ops/s

# Run progress: 74.24% complete, ETA 00:03:27
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295884361931409 as seed for Random
98865.395 ops/s
Iteration   1: 101103.115 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jsonsimple":
  132087.245 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.minimaljson

# Run progress: 75.76% complete, ETA 00:03:15
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295897513194553 as seed for Random
415305.594 ops/s
Iteration   1: 454216.307 ops/s

# Run progress: 77.27% complete, ETA 00:03:03
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295910705811838 as seed for Random
416592.690 ops/s
Iteration   1: 446175.504 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.minimaljson":
  450195.906 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.mjson

# Run progress: 78.79% complete, ETA 00:02:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295923937622234 as seed for Random
128894.048 ops/s
Iteration   1: 144909.385 ops/s

# Run progress: 80.30% complete, ETA 00:02:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295937080397378 as seed for Random
133755.608 ops/s
Iteration   1: 151008.019 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.mjson":
  147958.702 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.moshi

# Run progress: 81.82% complete, ETA 00:02:27
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295950247269827 as seed for Random
381188.771 ops/s
Iteration   1: 412149.020 ops/s

# Run progress: 83.33% complete, ETA 00:02:15
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295963424445805 as seed for Random
366801.077 ops/s
Iteration   1: 369725.764 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.moshi":
  390937.392 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.nanojson

# Run progress: 84.85% complete, ETA 00:02:03
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295976770590715 as seed for Random
530465.557 ops/s
Iteration   1: 643485.697 ops/s

# Run progress: 86.36% complete, ETA 00:01:50
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=295990184244443 as seed for Random
573909.149 ops/s
Iteration   1: 679475.373 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.nanojson":
  661480.535 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.orgjson

# Run progress: 87.88% complete, ETA 00:01:38
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296003429644136 as seed for Random
110769.416 ops/s
Iteration   1: 134191.014 ops/s

# Run progress: 89.39% complete, ETA 00:01:26
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296016836430357 as seed for Random
132986.219 ops/s
Iteration   1: 152915.691 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.orgjson":
  143553.352 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.purejson

# Run progress: 90.91% complete, ETA 00:01:14
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296030021075207 as seed for Random
72427.270 ops/s
Iteration   1: 83963.537 ops/s

# Run progress: 92.42% complete, ETA 00:01:01
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296043182203580 as seed for Random
69466.722 ops/s
Iteration   1: 79770.771 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.purejson":
  81867.154 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.tapestry

# Run progress: 93.94% complete, ETA 00:00:49
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296056376616071 as seed for Random
83723.700 ops/s
Iteration   1: 94414.630 ops/s

# Run progress: 95.45% complete, ETA 00:00:37
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296069529551569 as seed for Random
97053.309 ops/s
Iteration   1: 105417.359 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.tapestry":
  99915.994 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4, OpenJDK 64-Bit Server VM, 17.0.4+8-jvmci-22.2-b06
# VM invoker: /home/mintozzy/.sdkman/candidates/java/22.2.r17-grl/bin/java
# VM options: -XX:ThreadPriorityPolicy=1 -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.underscore_java

# Run progress: 96.97% complete, ETA 00:00:24
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296082732971918 as seed for Random
154552.999 ops/s
Iteration   1: 174829.042 ops/s

# Run progress: 98.48% complete, ETA 00:00:12
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: -XX:ThreadPriorityPolicy=1 may require system level permission, e.g., being the root user. If the necessary permission is not possessed, changes to priority will be silently ignored.
# Warmup Iteration   1: Using SEED=296095902900873 as seed for Random
135185.322 ops/s
Iteration   1: 153253.069 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.underscore_java":
  164041.055 ops/s


# Run complete. Total time: 00:13:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score   Error  Units
c.g.f.j.databind.Serialization.avajejsonb           thrpt    2   894924.900          ops/s
c.g.f.j.databind.Serialization.avajejsonb_jackson   thrpt    2   773176.956          ops/s
c.g.f.j.databind.Serialization.dsljson              thrpt    2  1160153.247          ops/s
c.g.f.j.databind.Serialization.dsljson_reflection   thrpt    2   910009.496          ops/s
c.g.f.j.databind.Serialization.fastjson             thrpt    2   847854.362          ops/s
c.g.f.j.databind.Serialization.flexjson             thrpt    2     1442.951          ops/s
c.g.f.j.databind.Serialization.genson               thrpt    2   531644.539          ops/s
c.g.f.j.databind.Serialization.gson                 thrpt    2   351756.931          ops/s
c.g.f.j.databind.Serialization.jackson              thrpt    2   819795.872          ops/s
c.g.f.j.databind.Serialization.jackson_afterburner  thrpt    2   817250.051          ops/s
c.g.f.j.databind.Serialization.jackson_blackbird    thrpt    2   787275.241          ops/s
c.g.f.j.databind.Serialization.jodd                 thrpt    2   134957.460          ops/s
c.g.f.j.databind.Serialization.johnzon              thrpt    2   372523.854          ops/s
c.g.f.j.databind.Serialization.jsonsmart            thrpt    2   324399.536          ops/s
c.g.f.j.databind.Serialization.logansquare          thrpt    2   881008.053          ops/s
c.g.f.j.databind.Serialization.moshi                thrpt    2   321891.464          ops/s
c.g.f.j.databind.Serialization.yasson               thrpt    2   297482.821          ops/s
c.g.f.j.stream.Serialization.genson                 thrpt    2   428789.230          ops/s
c.g.f.j.stream.Serialization.gson                   thrpt    2   242049.815          ops/s
c.g.f.j.stream.Serialization.jackson                thrpt    2   904008.643          ops/s
c.g.f.j.stream.Serialization.javaxjson              thrpt    2   687635.775          ops/s
c.g.f.j.stream.Serialization.jsonio                 thrpt    2   106270.217          ops/s
c.g.f.j.stream.Serialization.jsonsimple             thrpt    2   132087.245          ops/s
c.g.f.j.stream.Serialization.minimaljson            thrpt    2   450195.906          ops/s
c.g.f.j.stream.Serialization.mjson                  thrpt    2   147958.702          ops/s
c.g.f.j.stream.Serialization.moshi                  thrpt    2   390937.392          ops/s
c.g.f.j.stream.Serialization.nanojson               thrpt    2   661480.535          ops/s
c.g.f.j.stream.Serialization.orgjson                thrpt    2   143553.352          ops/s
c.g.f.j.stream.Serialization.purejson               thrpt    2    81867.154          ops/s
c.g.f.j.stream.Serialization.tapestry               thrpt    2    99915.994          ops/s
c.g.f.j.stream.Serialization.underscore_java        thrpt    2   164041.055          ops/s
