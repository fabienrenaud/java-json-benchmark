# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb

# Run progress: 0.00% complete, ETA 00:06:36
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=95432926115 as seed for Random
421318.961 ops/s
Iteration   1: 552189.065 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb":
  552189.065 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson

# Run progress: 3.03% complete, ETA 00:07:00
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=108479624306 as seed for Random
268775.781 ops/s
Iteration   1: 455731.176 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson":
  455731.176 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.boon

# Run progress: 6.06% complete, ETA 00:06:46
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=121613312083 as seed for Random
<failure>

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.ExceptionInInitializerError
	at org.boon.core.reflection.Reflection.<clinit>(Reflection.java:122)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_thrpt_jmhStub(Serialization_boon_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassCastException: class [B cannot be cast to class [C ([B and [C are in module java.base of loader 'bootstrap')
	at org.boon.core.reflection.FastStringUtils$StringImplementation$1.toCharArray(FastStringUtils.java:92)
	at org.boon.core.reflection.FastStringUtils.toCharArray(FastStringUtils.java:175)
	at org.boon.Str.underBarCase(Str.java:538)
	at org.boon.core.Sys.sysProp(Sys.java:341)
	at org.boon.core.timer.TimeKeeperBasic.<init>(TimeKeeperBasic.java:52)
	at org.boon.core.Sys.<clinit>(Sys.java:182)
	... 20 more

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.NoClassDefFoundError: Could not initialize class org.boon.core.reflection.Reflection
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeInstance(JsonSimpleSerializerImpl.java:601)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serializeObject(JsonSimpleSerializerImpl.java:564)
	at org.boon.json.serializers.impl.JsonSimpleSerializerImpl.serialize(JsonSimpleSerializerImpl.java:152)
	at org.boon.json.implementation.ObjectMapperImpl.writeValue(ObjectMapperImpl.java:217)
	at com.github.fabienrenaud.jjb.databind.Serialization.boon(Serialization.java:89)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_boon_jmhTest.boon_Throughput(Serialization_boon_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson

# Run progress: 9.09% complete, ETA 00:04:32
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=122567388010 as seed for Random
520598.949 ops/s
Iteration   1: 679970.164 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson":
  679970.164 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection

# Run progress: 12.12% complete, ETA 00:04:52
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=135673173096 as seed for Random
532009.501 ops/s
Iteration   1: 584038.113 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection":
  584038.113 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.fastjson

# Run progress: 15.15% complete, ETA 00:04:59
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=148787402559 as seed for Random
355975.161 ops/s
Iteration   1: 553071.348 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.fastjson":
  553071.348 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.flexjson

# Run progress: 18.18% complete, ETA 00:04:59
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=161894873414 as seed for Random
1952.802 ops/s
Iteration   1: 1307.719 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.flexjson":
  1307.719 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.genson

# Run progress: 21.21% complete, ETA 00:04:55
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=174995912561 as seed for Random
213100.156 ops/s
Iteration   1: 273389.099 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.genson":
  273389.099 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.gson

# Run progress: 24.24% complete, ETA 00:04:49
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=188068122131 as seed for Random
103133.460 ops/s
Iteration   1: 163499.770 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.gson":
  163499.770 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson

# Run progress: 27.27% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=201158777408 as seed for Random
343075.842 ops/s
Iteration   1: 472252.570 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson":
  472252.570 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner

# Run progress: 30.30% complete, ETA 00:04:33
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=214307982450 as seed for Random
338541.101 ops/s
Iteration   1: 418097.369 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner":
  418097.369 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird

# Run progress: 33.33% complete, ETA 00:04:24
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=227353714500 as seed for Random
336818.663 ops/s
Iteration   1: 412804.977 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird":
  412804.977 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jodd

# Run progress: 36.36% complete, ETA 00:04:13
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=240423364883 as seed for Random
26332.181 ops/s
Iteration   1: 51486.839 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jodd":
  51486.839 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.johnzon

# Run progress: 39.39% complete, ETA 00:04:03
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=253466055228 as seed for Random
75042.167 ops/s
Iteration   1: 159427.397 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.johnzon":
  159427.397 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jsoniter

# Run progress: 42.42% complete, ETA 00:03:52
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=266550238190 as seed for Random
<failure>

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_thrpt_jmhStub(Serialization_jsoniter_jmhTest.java:119)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 37 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @3bb50eaa
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not "opens java.lang" to unnamed module @3bb50eaa
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
	at javassist.util.proxy.SecurityActions.setAccessible(SecurityActions.java:159)
	at javassist.util.proxy.DefineClassHelper$JavaOther.defineClass(DefineClassHelper.java:213)
	at javassist.util.proxy.DefineClassHelper$Java11.defineClass(DefineClassHelper.java:52)
	at javassist.util.proxy.DefineClassHelper.toClass(DefineClassHelper.java:260)
	at javassist.ClassPool.toClass(ClassPool.java:1240)
	at javassist.ClassPool.toClass(ClassPool.java:1098)
	at javassist.ClassPool.toClass(ClassPool.java:1056)
	at javassist.CtClass.toClass(CtClass.java:1298)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:29)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more

com.jsoniter.spi.JsonException: failed to generate encoder for: ParameterizedTypeImpl{actualTypeArguments=[class java.lang.String], ownerType=null, rawType=java.util.List} with [class java.lang.String], exception: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
java.util.List list = (java.util.List)obj;
int size = list.size();
if (size == 0) { return; }
java.lang.Object e = list.get(0);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
for (int i = 1; i < size; i++) {
stream.write(',');
e = list.get(i);
if (e == null) { stream.writeNull(); } else {
stream.writeVal((java.lang.String)e);
}
}
}

	at com.jsoniter.output.Codegen.gen(Codegen.java:110)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:269)
	at com.jsoniter.output.CodegenImplArray.genList(CodegenImplArray.java:113)
	at com.jsoniter.output.CodegenImplArray.genCollection(CodegenImplArray.java:30)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:222)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.CodegenImplNative.genWriteOp(CodegenImplNative.java:295)
	at com.jsoniter.output.CodegenImplObject.genField(CodegenImplObject.java:117)
	at com.jsoniter.output.CodegenImplObject.genObject(CodegenImplObject.java:22)
	at com.jsoniter.output.Codegen.genSource(Codegen.java:227)
	at com.jsoniter.output.Codegen.gen(Codegen.java:98)
	at com.jsoniter.output.Codegen.getEncoder(Codegen.java:49)
	at com.jsoniter.output.JsonStream.writeVal(JsonStream.java:362)
	at com.jsoniter.output.JsonStream.serialize(JsonStream.java:408)
	at com.github.fabienrenaud.jjb.databind.Serialization.jsoniter(Serialization.java:169)
	at com.github.fabienrenaud.jjb.databind.jmh_generated.Serialization_jsoniter_jmhTest.jsoniter_Throughput(Serialization_jsoniter_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: jsoniter_codegen.cfg9223372034806973682.encoder.java.util.List_java.lang.String: frozen class (cannot edit)
	at javassist.ClassPool.checkNotFrozen(ClassPool.java:595)
	at javassist.ClassPool.makeClass(ClassPool.java:837)
	at javassist.ClassPool.makeClass(ClassPool.java:814)
	at com.jsoniter.output.DynamicCodegen.gen(DynamicCodegen.java:16)
	at com.jsoniter.output.Codegen.gen(Codegen.java:102)
	... 36 more




# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jsonsmart

# Run progress: 45.45% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=267669985914 as seed for Random
199437.580 ops/s
Iteration   1: 240520.758 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jsonsmart":
  240520.758 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.logansquare

# Run progress: 48.48% complete, ETA 00:03:16
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=280769111043 as seed for Random
303734.964 ops/s
Iteration   1: 434984.630 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.logansquare":
  434984.630 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.moshi

# Run progress: 51.52% complete, ETA 00:03:06
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=293941146097 as seed for Random
127081.378 ops/s
Iteration   1: 174194.689 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.moshi":
  174194.689 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.yasson

# Run progress: 54.55% complete, ETA 00:02:56
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=307042450913 as seed for Random
57493.950 ops/s
Iteration   1: 157592.502 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.yasson":
  157592.502 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.genson

# Run progress: 57.58% complete, ETA 00:02:45
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=320143274133 as seed for Random
93388.230 ops/s
Iteration   1: 219611.116 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.genson":
  219611.116 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.gson

# Run progress: 60.61% complete, ETA 00:02:34
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=333212806357 as seed for Random
76647.878 ops/s
Iteration   1: 117825.306 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.gson":
  117825.306 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jackson

# Run progress: 63.64% complete, ETA 00:02:23
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=346366096049 as seed for Random
286739.980 ops/s
Iteration   1: 403279.551 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jackson":
  403279.551 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.javaxjson

# Run progress: 66.67% complete, ETA 00:02:12
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=359584929506 as seed for Random
195394.931 ops/s
Iteration   1: 344043.455 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.javaxjson":
  344043.455 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jsonio

# Run progress: 69.70% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=372761228191 as seed for Random
11645.064 ops/s
Iteration   1: 12759.097 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jsonio":
  12759.097 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.jsonsimple

# Run progress: 72.73% complete, ETA 00:01:48
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=385901262790 as seed for Random
31587.713 ops/s
Iteration   1: 42945.730 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.jsonsimple":
  42945.730 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.minimaljson

# Run progress: 75.76% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=398929995131 as seed for Random
97438.493 ops/s
Iteration   1: 244814.628 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.minimaljson":
  244814.628 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.mjson

# Run progress: 78.79% complete, ETA 00:01:25
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=412068251242 as seed for Random
21541.272 ops/s
Iteration   1: 37083.653 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.mjson":
  37083.653 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.moshi

# Run progress: 81.82% complete, ETA 00:01:13
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=425186530761 as seed for Random
201360.866 ops/s
Iteration   1: 282201.409 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.moshi":
  282201.409 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.nanojson

# Run progress: 84.85% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=438188887860 as seed for Random
218666.264 ops/s
Iteration   1: 281957.434 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.nanojson":
  281957.434 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.orgjson

# Run progress: 87.88% complete, ETA 00:00:49
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=451256851225 as seed for Random
19727.894 ops/s
Iteration   1: 20022.129 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.orgjson":
  20022.129 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.purejson

# Run progress: 90.91% complete, ETA 00:00:36
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=464371847011 as seed for Random
37018.577 ops/s
Iteration   1: 76892.530 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.purejson":
  76892.530 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.tapestry

# Run progress: 93.94% complete, ETA 00:00:24
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=477502890336 as seed for Random
12185.971 ops/s
Iteration   1: 26639.654 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.tapestry":
  26639.654 ops/s


# JMH version: 1.33
# VM version: JDK 17.0.4.1, OpenJDK 64-Bit Server VM, 17.0.4.1+1
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.stream.Serialization.underscore_java

# Run progress: 96.97% complete, ETA 00:00:12
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=490613462763 as seed for Random
60878.642 ops/s
Iteration   1: 105217.303 ops/s


Result "com.github.fabienrenaud.jjb.stream.Serialization.underscore_java":
  105217.303 ops/s


# Run complete. Total time: 00:06:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score   Error  Units
c.g.f.j.databind.Serialization.avajejsonb           thrpt       552189.065          ops/s
c.g.f.j.databind.Serialization.avajejsonb_jackson   thrpt       455731.176          ops/s
c.g.f.j.databind.Serialization.dsljson              thrpt       679970.164          ops/s
c.g.f.j.databind.Serialization.dsljson_reflection   thrpt       584038.113          ops/s
c.g.f.j.databind.Serialization.fastjson             thrpt       553071.348          ops/s
c.g.f.j.databind.Serialization.flexjson             thrpt         1307.719          ops/s
c.g.f.j.databind.Serialization.genson               thrpt       273389.099          ops/s
c.g.f.j.databind.Serialization.gson                 thrpt       163499.770          ops/s
c.g.f.j.databind.Serialization.jackson              thrpt       472252.570          ops/s
c.g.f.j.databind.Serialization.jackson_afterburner  thrpt       418097.369          ops/s
c.g.f.j.databind.Serialization.jackson_blackbird    thrpt       412804.977          ops/s
c.g.f.j.databind.Serialization.jodd                 thrpt        51486.839          ops/s
c.g.f.j.databind.Serialization.johnzon              thrpt       159427.397          ops/s
c.g.f.j.databind.Serialization.jsonsmart            thrpt       240520.758          ops/s
c.g.f.j.databind.Serialization.logansquare          thrpt       434984.630          ops/s
c.g.f.j.databind.Serialization.moshi                thrpt       174194.689          ops/s
c.g.f.j.databind.Serialization.yasson               thrpt       157592.502          ops/s
c.g.f.j.stream.Serialization.genson                 thrpt       219611.116          ops/s
c.g.f.j.stream.Serialization.gson                   thrpt       117825.306          ops/s
c.g.f.j.stream.Serialization.jackson                thrpt       403279.551          ops/s
c.g.f.j.stream.Serialization.javaxjson              thrpt       344043.455          ops/s
c.g.f.j.stream.Serialization.jsonio                 thrpt        12759.097          ops/s
c.g.f.j.stream.Serialization.jsonsimple             thrpt        42945.730          ops/s
c.g.f.j.stream.Serialization.minimaljson            thrpt       244814.628          ops/s
c.g.f.j.stream.Serialization.mjson                  thrpt        37083.653          ops/s
c.g.f.j.stream.Serialization.moshi                  thrpt       282201.409          ops/s
c.g.f.j.stream.Serialization.nanojson               thrpt       281957.434          ops/s
c.g.f.j.stream.Serialization.orgjson                thrpt        20022.129          ops/s
c.g.f.j.stream.Serialization.purejson               thrpt        76892.530          ops/s
c.g.f.j.stream.Serialization.tapestry               thrpt        26639.654          ops/s
c.g.f.j.stream.Serialization.underscore_java        thrpt       105217.303          ops/s
